apiVersion: v1
kind: Secret
metadata:
  name: mongodb-auth
  namespace: demo
stringData:
  password: thisIs1StrongPassword
  username: root
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  name: mongodb-config
  namespace: demo
stringData:
  mongod.conf: |
    net:
      maxIncomingConnections: 20000
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app.kubernetes.io/instance: mongodb
    app.kubernetes.io/name: mongodbs.kubedb.com
  name: mongodb-init-script
  namespace: demo
stringData:
  mongo-initializer.js: |
    // create user for "testDB"
    db.createUser({
      user: 'root',
      pwd: 'changeit',
      roles: [
          {
              role: 'readWrite',
              db: 'testDB',
          },
      ],
    });
    db = new Mongo().getDB("testDB");

    // create sample collection in the "testDB"
    db.createCollection('users', { capped: false });
    db.createCollection('test', { capped: false });

    // insert some sample data into the "testDB"
    db.test.insert([
      { "item": 1 },
      { "item": 2 },
      { "item": 3 },
      { "item": 4 },
      { "item": 5 }
    ]);
type: Opaque
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: mongodb-ca
  namespace: demo
spec:
  ca:
    secretName: mongodb-ca
---
apiVersion: kubedb.com/v1alpha2
kind: MongoDB
metadata:
  name: mongodb
  namespace: demo
spec:
  authSecret:
    name: mongodb-auth
  configSecret:
    name: mongodb-config
  init:
    script:
      secret:
        secretName: mongodb-init-script
  sslMode: requireSSL
  storage:
    resources:
      requests:
        storage: 1Gi
    storageClassName: standard
  storageType: Durable
  terminationPolicy: WipeOut
  tls:
    issuerRef:
      apiGroup: cert-manager.io
      kind: Issuer
      name: mongo-ca
  version: 4.2.3
---
apiVersion: stash.appscode.com/v1alpha1
kind: Repository
metadata:
  labels:
    app.kubernetes.io/instance: mongodb
    app.kubernetes.io/name: mongodbs.kubedb.com
  name: mongodb-repo
  namespace: demo
spec:
  backend:
    gcs:
      bucket: stash-testing
      prefix: /demo/mongodb
    storageSecretName: gcs-secret
---
apiVersion: stash.appscode.com/v1beta1
kind: BackupConfiguration
metadata:
  labels:
    app.kubernetes.io/instance: mongodb
    app.kubernetes.io/name: mongodbs.kubedb.com
  name: mongodb
  namespace: demo
spec:
  repository:
    name: mongodb-repo
  retentionPolicy:
    keepLast: 5
    name: keep-last-5
    prune: true
  schedule: '*/5 * * * *'
  target:
    ref:
      apiVersion: appcatalog.appscode.com/v1alpha1
      kind: AppBinding
      name: mongodb
  task:
    name: mongodb-backup-4.2.3-v5
