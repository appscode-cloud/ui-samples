apiVersion: v1
kind: Secret
metadata:
  name: redis-config
  namespace: demo
stringData:
  redis.conf: |
    databases 10
    maxclients 500
type: Opaque
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: redis-ca
  namespace: demo
spec:
  ca:
    secretName: redis-ca
---
apiVersion: kubedb.com/v1alpha2
kind: Redis
metadata:
  annotations:
    stash.appscode.com/backup-blueprint: redis-backupblueprint
    stash.appscode.com/schedule: '*/7 * * * *'
  name: redis
  namespace: demo
spec:
  configSecret:
    name: redis-config
  init:
    waitForInitialRestore: true
  mode: Sentinel
  monitor:
    agent: prometheus.io
    prometheus:
      exporter:
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 128Mi
  replicas: 3
  sentinelRef:
    name: sentinel
    namespace: demo
  storage:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
    storageClassName: standard
  terminationPolicy: WipeOut
  tls:
    issuerRef:
      apiGroup: cert-manager.io
      kind: Issuer
      name: redis-ca
  version: 6.2.5
---
apiVersion: kubedb.com/v1alpha2
kind: RedisSentinel
metadata:
  name: sentinel
  namespace: demo
spec:
  replicas: 3
  storage:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
    storageClassName: standard
  storageType: Durable
  terminationPolicy: WipeOut
  version: 6.2.5
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    app.kubernetes.io/instance: redis
    app.kubernetes.io/name: redises.kubedb.com
    release: prometheus-stack
  name: redis
  namespace: demo
spec:
  endpoints:
  - honorLabels: true
    interval: 30s
    path: /metrics
    port: metrics
  namespaceSelector:
    matchNames:
    - demo
  selector:
    matchLabels:
      app.kubernetes.io/instance: redis
      app.kubernetes.io/name: redises.kubedb.com
---
apiVersion: stash.appscode.com/v1alpha1
kind: Repository
metadata:
  labels:
    app.kubernetes.io/instance: redis
    app.kubernetes.io/name: redises.kubedb.com
  name: redis-init-repo
  namespace: demo
spec:
  backend:
    gcs:
      bucket: stash-testing
      prefix: /demo/redis
    storageSecretName: gcs-secret
---
apiVersion: stash.appscode.com/v1beta1
kind: BackupBlueprint
metadata:
  name: redis-backupblueprint
spec:
  backend:
    gcs:
      bucket: stash-testing
      prefix: stash-backup/${TARGET_NAMESPACE}/${TARGET_APP_RESOURCE}/${TARGET_NAME}
    storageSecretName: gcs-secret
  retentionPolicy:
    keepLast: 5
    name: keep-last-5
    prune: true
  schedule: '*/5 * * * *'
---
apiVersion: stash.appscode.com/v1beta1
kind: RestoreSession
metadata:
  labels:
    app.kubernetes.io/instance: redis
    app.kubernetes.io/name: redises.kubedb.com
  name: redis-init
  namespace: demo
spec:
  repository:
    name: redis-init-repo
  rules:
  - snapshots:
    - latest
  target:
    ref:
      apiVersion: appcatalog.appscode.com/v1alpha1
      kind: AppBinding
      name: redis
